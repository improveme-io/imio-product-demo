generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// TODO: rename this to state
enum Status {
  CREATING
  REQUESTED
  AUTHORING
  PENDING
  DONE
}

// TODO: introduce "Feedback" model, which is a container for one owner-author relationship, with feedback items as substance
// it could have it's own state, like "requested", "authoring", "pending", "done"
model FeedbackRequest {
  id        String    @id @default(cuid())
  // TODO: move this to nanoid, when it is supported by Prisma (https://github.com/prisma/prisma/issues/17199)
  slug      String    @unique @default(cuid())
  status    Status    @default(CREATING)
  title     String?   @db.Text
  paragraph String?   @db.Text
  // TODO: rename this to revealDate
  deadline  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  ownerId         String
  owner           User           @relation("owner", fields: [ownerId], references: [id])
  authors         User[]
  authorsStarted  User[]         @relation("startedAuthors")
  authorsFinished User[]         @relation("finishedAuthors")
  feedbackItems   FeedbackItem[]
  formSave        FormSave?

  @@index([ownerId])
  @@index([slug])
}

model FormSave {
  id        String    @id @default(cuid())
  title     String?   @db.Text
  paragraph String?   @db.Text
  deadline  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt

  feedbackRequestId String             @unique
  feedbackRequest   FeedbackRequest    @relation(fields: [feedbackRequestId], references: [id], onDelete: Cascade)
  authors           TempUser[]
  feedbackItems     TempFeedbackItem[]

  @@index([feedbackRequestId])
}

model TempUser {
  id        String   @id @default(cuid())
  email     String
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  formSaveId String
  formSave   FormSave @relation(fields: [formSaveId], references: [id], onDelete: Cascade)

  @@index([formSaveId])
}

model TempFeedbackItem {
  id        String   @id @default(cuid())
  prompt    String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  formSaveId String
  formSave   FormSave @relation(fields: [formSaveId], references: [id], onDelete: Cascade)

  @@index([formSaveId])
}

model FeedbackItem {
  id        String   @id @default(cuid())
  prompt    String?  @db.Text
  payload   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  requestId String
  request   FeedbackRequest @relation(fields: [requestId], references: [id], onDelete: Cascade)
  ownerId   String
  owner     User            @relation("owner", fields: [ownerId], references: [id])
  authorId  String
  author    User            @relation(fields: [authorId], references: [id])

  @@index([requestId])
  @@index([ownerId])
  @@index([authorId])
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName       String
  lastName        String
  clerkUserId     String?  @unique
  profileImageUrl String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  requestsOwned             FeedbackRequest[] @relation("owner")
  itemsOwned                FeedbackItem[]    @relation("owner")
  requestsAuthored          FeedbackRequest[]
  requestsStartedAuthoring  FeedbackRequest[] @relation("startedAuthors")
  requestsFinishedAuthoring FeedbackRequest[] @relation("finishedAuthors")
  itemsAuthored             FeedbackItem[]
}
